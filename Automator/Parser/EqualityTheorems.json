{
	"theorems": [
		{
			"class": "TheoremEqualityTriangleSideSideSide",
			"name": "Theorem Equality triangle side side side",
			"description": "If three sides of one triangle are equal to three corresponding sides of the other triangle then these triangles are equal to each other",
			"input types": [
				"Triangle",
				"Triangle"
			],
			"parameters": [
				"triangle1",
				"triangle2"
			],
			"swift": {
				"preparation": [
					"if triangle1.equal(triangle2) {",
					"\treturn",
					"}"
				],
				"algorithm": [
					"for i in 0...2 {",
					"\tfor reversed in [true, false] {",
					"\t\tlet shifted = triangle1.shifted(by: Shift(i, reversed: reversed))",
					"\t\tlet equalitySidesAB = shifted.side(.AB).equal(triangle2.side(.AB))",
					"\t\tlet equalitySidesBC = shifted.side(.BC).equal(triangle2.side(.BC))",
					"\t\tlet equalitySidesCA = shifted.side(.CA).equal(triangle2.side(.CA))",
					"\t\tif (equalitySidesAB && equalitySidesBC && equalitySidesCA) {",
					"\t\t\tresult.append(BEPolygonEquality(left: triangle1, right: triangle2, leftShift: Shift(i, reversed: reversed)))",
					"\t\t}",
					"\t}",
					"}"
				]	
			}
		},
		{
			"class": "TheoremEqualityTriangleSideAngleSide",
			"name": "Theorem Equality Triangle Side Angle Side",
			"description": "If two sides and the angle between them of one triangle are respectively equal to two sides and the angle between them of another triangle, then such triangles are equal.",
			"input types": [
				"Triangle",
				"Triangle"
			],
			"parameters": [
				"triangle1",
				"triangle2"
			],
			"swift": {
				"preparation": [
					"if triangle1.equal(triangle2) {",
					"\treturn",
					"}"
				],
				"algorithm": [
					"for i in 0...2 {",
					"\tfor reversed in [true, false] {",
					"\t\tlet shifted = triangle1.shifted(by: Shift(i, reversed: reversed))",
					"\t\tlet equalitySidesAB = shifted.side(.AB).equal(triangle2.side(.AB))",
					"\t\tlet equalitySidesBC = shifted.side(.BC).equal(triangle2.side(.BC))",
					"\t\tlet equalitySidesCA = shifted.side(.CA).equal(triangle2.side(.CA))",
					"\t\tlet equalityAnglesA = shifted.angle(.A).equal(triangle2.angle(.A))",
					"\t\tlet equalityAnglesB = shifted.angle(.B).equal(triangle2.angle(.B))",
					"\t\tlet equalityAnglesC = shifted.angle(.C).equal(triangle2.angle(.C))",
					"\t\tif (equalitySidesAB && equalitySidesBC && equalityAnglesB) || (equalitySidesAB && equalitySidesCA && equalityAnglesA) || (equalitySidesBC && equalitySidesCA && equalityAnglesC) {",
					"\t\t\tresult.append(BEPolygonEquality(left: triangle1, right: triangle2, leftShift: Shift(i, reversed: reversed)))",
					"\t\t}",
					"\t}",
					"}"
				]	
			}
		},
		{
			"class": "TheoremEqualityTriangleAngleSideAngle",
			"name": "Theorem Equality Triangle Angle Side Angle",
			"description": "If a side and two adjacent angles of one triangle are respectively equal to the side and two adjacent angles of another triangle, then such triangles are equal.",
			"input types": [
				"Triangle",
				"Triangle"
			],
			"parameters": [
				"triangle1",
				"triangle2"
			],
			"swift": {
				"preparation": [
					"if triangle1.equal(triangle2) {",
					"\treturn",
					"}"
				],
				"algorithm": [
					"for i in 0...2 {",
					"\tfor reversed in [true, false] {",
					"\t\tlet shifted = triangle1.shifted(by: Shift(i, reversed: reversed))",
					"\t\tlet equalityAnglesA = shifted.angle(.A).equal(triangle2.angle(.A))",
					"\t\tlet equalityAnglesB = shifted.angle(.B).equal(triangle2.angle(.B))",
					"\t\tlet equalityAnglesC = shifted.angle(.C).equal(triangle2.angle(.C))",
					"\t\tif (equalitySidesAB && equalityAnglesA && equalityAnglesB) || (equalitySidesBC && equalityAnglesB && equalityAnglesC) || (equalitySidesCA && equalityAnglesC && equalityAnglesA)) {",
					"\t\t\tresult.append(BEPolygonEquality(left: triangle1, right: triangle2, leftShift: Shift(i, reversed: reversed)))",
					"\t\t}",
					"\t}",
					"}"
				]	
			}
		}
	]
}