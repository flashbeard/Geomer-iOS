{
	"theorems": [
		{
			"class": "TheoremSimilarityTrianglesAngleAngle",
			"name": "Theorem Similarity Triangles Angle Angle",
			"description": "If two angles of one triangle are equal to two angles of another triangle, then such triangles are similar.",
			"input types": [
				"Triangle",
				"Triangle"
			],
			"parameters": [
				"triangle1",
				"triangle2"
			],
			"swift": {
				"preparation": [
					"if triangle1 == triangle2 {",
					"\treturn",
					"}"
				],
				"algorithm": [
					"for i in 0...2 {",
					"\tfor reversed in [true, false] {",
					"\t\tlet shifted = triangle1.shifted(by: Shift(i, reversed: reversed))",
					"\t\tlet equalityAnglesA = shifted.angle(.A).equal(triangle2.angle(.A))",
					"\t\tlet equalityAnglesB = shifted.angle(.B).equal(triangle2.angle(.B))",
					"\t\tlet equalityAnglesC = shifted.angle(.C).equal(triangle2.angle(.C))",
					"\t\tif ((equalityAnglesA && equalityAnglesB) || (equalityAnglesB && equalityAnglesC) || (equalityAnglesC && equalityAnglesA)) {",
					"\t\t\tresult.append(BEPolygonSimilarity(left: triangle1, right: triangle2, leftShift: Shift(i, reversed: reversed)))",
					"\t\t}",
					"\t}",
					"}"
				]	
			}
		},
		{
			"class": "TheoremSimilarityTrianglesSideAngleSide",
			"name": "Theorem Similarity Triangles Side Angle Side",
			"description": "If two sides of one triangle are proportional to two sides of another triangle and the angles enclosed between these sides are equal, then such triangles are similar.",
			"input types": [
				"Triangle",
				"Triangle"
			],
			"parameters": [
				"triangle1",
				"triangle2"
			],
			"swift": {
				"preparation": [
					"if triangle1 == triangle2 {",
					"\treturn",
					"}"
				],
				"algorithm": [
					"for i in 0...2 {",
					"\tfor reversed in [true, false] {",
					"\t\tlet shifted = triangle1.shifted(by: Shift(i, reversed: reversed))",
					"\t\tlet equalityAnglesA = shifted.angle(.A).equal(triangle2.angle(.A))",
					"\t\tlet equalityAnglesB = shifted.angle(.B).equal(triangle2.angle(.B))",
					"\t\tlet equalityAnglesC = shifted.angle(.C).equal(triangle2.angle(.C))",
					"\t\tlet ratioSidesAB = try? ((shifted.side(.AB).value?.value ?? Double.nan) / (triangle2.side(.AB).value?.value ?? Double.nan)).fraction()",
					"\t\tlet ratioSidesBC = try? ((shifted.side(.BC).value?.value ?? Double.nan) / (triangle2.side(.BC).value?.value ?? Double.nan)).fraction()",
					"\t\tlet ratioSidesCA = try? ((shifted.side(.CA).value?.value ?? Double.nan) / (triangle2.side(.CA).value?.value ?? Double.nan)).fraction()",
					"\t\tif equalityAnglesA && ratioSidesCA != nil && ratioSidesCA == ratioSidesAB {",
					"\t\t\tresult.append(BEPolygonSimilarity(left: triangle1, right: triangle2, leftShift: Shift(i, reversed: reversed), ratio: ratioSidesAB))",
					"\t\t} else if equalityAnglesB && ratioSidesAB != nil && ratioSidesAB == ratioSidesBC {",
					"\t\t\tresult.append(BEPolygonSimilarity(left: triangle1, right: triangle2, leftShift: Shift(i, reversed: reversed), ratio: ratioSidesBC))",
					"\t\t} else if equalityAnglesC && ratioSidesBC != nil && ratioSidesBC == ratioSidesCA {",
					"\t\t\tresult.append(BEPolygonSimilarity(left: triangle1, right: triangle2, leftShift: Shift(i, reversed: reversed), ratio: ratioSidesCA))",
					"\t\t}",
					"\t}",
					"}"
				]	
			}
		},
		{
			"class": "TheoremSimilarityTrianglesSideSideSide",
			"name": "Theorem Similarity Triangles Side Side Side",
			"description": "If the three sides of one triangle are proportional to the three sides of another triangle, then such triangles are similar.",
			"input types": [
				"Triangle",
				"Triangle"
			],
			"parameters": [
				"triangle1",
				"triangle2"
			],
			"swift": {
				"preparation": [
					
				],
				"algorithm": [
					"for i in 0...2 {",
					"\tfor reversed in [true, false] {",
					"\t\tlet shifted = triangle1.shifted(by: Shift(i, reversed: reversed))",
					"\t\tlet ratioSidesAB = try? ((shifted.side(.AB).value?.value ?? Double.nan) / (triangle2.side(.AB).value?.value ?? Double.nan)).fraction()",
					"\t\tlet ratioSidesBC = try? ((shifted.side(.BC).value?.value ?? Double.nan) / (triangle2.side(.BC).value?.value ?? Double.nan)).fraction()",
					"\t\tlet ratioSidesCA = try? ((shifted.side(.CA).value?.value ?? Double.nan) / (triangle2.side(.CA).value?.value ?? Double.nan)).fraction()",
					"\t\tif  ratioSidesAB != nil && ratioSidesAB == ratioSidesBC && ratioSidesBC == ratioSidesCA {",
					"\t\t\tresult.append(BEPolygonSimilarity(left: triangle1, right: triangle2, leftShift: Shift(i, reversed: reversed), ratio: ratioSidesAB))",
					"\t\t}",
					"\t}",
					"}"
				]	
			}
		}
	]
}